高级类型

交叉类型（Intersection Types）
类型1 & 类型2
交叉类型是将多个类型合并为一个类型
我们大多是在混入（mixins）时使用
function extend<T, U>(first: T, second: U): T & U {
    let result = <T & U>{};
    for (let id in first) {
        (<any>result)[id] = (<any>first)[id];
    }
    for (let id in second) {
        if (!result.hasOwnProperty(id)) {
            (<any>result)[id] = (<any>second)[id];
        }
    }
    return result;
}
被extend处理过的函数，同时具备T, U的类型，这里的T & U就是交叉类型

联合类型（Union Types）
类型1 | 类型2
联合类型与交叉类型很有关联，但是使用上却完全不同
一个代码库希望传入number或string类型的参数，使用联和类型
**一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员
interface Bird {
    fly();
    layEggs();
}

interface Fish {
    swim();
    layEggs();
}

function getSmallPet(): Fish | Bird {
    // ...
}

let pet = getSmallPet();
pet只能访问到，Fish | Bird中共有成员layEggs，而不能访问到swim、fly

类型保护与区分类型（Type Guards and Differentiating Types）
联合类型中 只能访问公有值
当我们非要访问其中一个类型时，需要使用断言

用户自定义的类型保护
定义一些方法，其缩小类型的范围
function isFish(pet: Fish | Bird): pet is Fish {
    return (<Fish>pet).swim !== undefined;
}
通过此方法过滤的数据，一定是Fish类型，不然就是Bird

typeof类型保护
typeof v === "typename"
typeof v !== "typename"

// typeof
let s = '123'
type y = typeof s  // y ===string
// 字面量类型
type ys= '123'

以上写法会被识别为类型保护
typename ： "number"，"string"，"boolean"或"symbol"
只有以上四种值，以及上面两种写法，会被ts编译为类型保护

instanceof类型保护
instanceof的右侧要求是一个构造函数，TypeScript将细化为：
type Fish = { swim: ()=>{}:void}
type brid = { fly: ()=>{}:void }
function move (x : Fish | brid) {
  if(x instanceof swim ) {
    x.fly()
  }
} 
此构造函数的prototype属性的类型，如果它的类型不为any的话
构造签名所返回的类型的联合

in操作类型收窄
type Fish = { swim: ()=>{}:void}
type brid = { fly: ()=>{}:void }
function move (x : Fish | brid) {
  if('fly' in  x) {
    x.fly()
  } else {
  控制流收窄
  }
} 

赋值收窄
let x = y > 0 ? 0 : '12'

类型收窄
 1.真值收窄
 2.类型收窄
 3.等值收窄


可以为null的类型
null和undefined，它们分别具有值null和undefined. 
默认情况下，类型检查器认为null与undefined可以赋值给任何类型。 
null与undefined是所有其它类型的一个有效值

--strictNullChecks标记可以解决此错误：当你声明一个变量时，
它不会自动地包含null或undefined

let s = "foo";
s = null; // 错误, 'null'不能赋值给'string'
let sn: string | null = "bar";
sn = null; // 可以

sn = undefined; // error, 'undefined'不能赋值给'string | null'
使用联合类型明确的包含它们
TypeScript会把null和undefined区别对待。 string | null，string | undefined和string | undefined | null是不同的类型

可选参数和可选属性
使用了--strictNullChecks，可选参数会被自动地加上| undefined:
function f(x: number, y?: number) {
    return x + (y || 0);
}
f(1, 2);
f(1, undefined);
f(1, null); // error, 'null' is not assignable to 'number | undefined'
可选属性与这个一致

类型保护和类型断言
编译器不能够去除null或undefined，你可以使用类型断言手动去除。
语法是添加 值1! 从值1的类型里去除了null和undefined：

类型别名
type 定义类型名 = 类型;
type Name = string;
type NameResolver = () => string;
type NameOrResolver = Name | NameResolver;
别名不会新建一个类型 - 它创建了一个新名字来引用那个类型

泛型-类型别名
type Container<T> = { value: T };
**类型别名不能出现在声明右侧的任何地方。

接口 vs. 类型别名
1.类型别名不能被extends和implements
2.无法通过接口来描述一个类型并且需要使用联合类型或元组类型，使用类型别名

字符串字面量类型
字符串字面量类型允许你指定字符串必须的固定值。
字符串字面量类型可以与联合类型，类型保护和类型别名很好的配合

数字字面量类型
function rollDie(): 1 | 2 | 3 | 4 | 5 | 6 {
    // ...
}

枚举成员类型？

可辨识联合（Discriminated Unions）
你可以合并单例类型，联合类型，类型保护和类型别名来创建一个叫做可辨识联合的高级模式，
它也称做标签联合或代数数据类型
1.具有普通的单例类型属性—可辨识的特征。
2.一个类型别名包含了那些类型的联合—联合。
3.此属性上的类型保护。

interface Square {
    kind: "square";
    size: number;
}
interface Rectangle {
    kind: "rectangle";
    width: number;
    height: number;
}
interface Circle {
    kind: "circle";
    radius: number;
}

type Shape = Square | Rectangle | Circle;

function area(s: Shape) {
    switch (s.kind) {
        case "square": return s.size * s.size;
        case "rectangle": return s.height * s.width;
        case "circle": return Math.PI * s.radius ** 2;
    }
}


多态的this类型


索引类型（Index types）
索引类型查询 keyof T
索引访问T[K][]  -》 T[K]返回的类型

索引类型和字符串索引签名
keyof和T[K]与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么keyof T会是string。
interface Map<T> {
    [key: string]: T;
}
let keys: keyof Map<number>; // string
let value: Map<number>['foo']; // number

映射类型
它的语法与索引签名的语法类型，内部使用了for .. in。 
具有三个部分：

类型变量K，它会依次绑定到每个属性。
字符串字面量联合的Keys，它包含了要迭代的属性名的集合。
属性的结果类型。

例子 运用keyof T
type Readonly<T> = {
    readonly [P in keyof T]: T[P];
}
type Partial<T> = {
    [P in keyof T]?: T[P];
}
















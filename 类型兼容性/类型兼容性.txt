类型兼容性
类型兼容性用于确定一个类型是否能赋值给其他类型
结构类型是一种只使用其成员来描述类型的方式

兼容性检查
interface Named {
    name: string;
}

let x: Named;
let y = { name: 'Alice', location: 'Seattle' };
x = y;
x类型要求name： string。y满足，因此这里赋值正确
兼容性检查 ：只会针对目标类型（这里是Named）的成员一一检查是否兼容。

函数参数比较
let x = (a: number) => 0;
let y = (b: number, s: string) => 0;

y = x; // OK
x = y; // Error
只比较参数的类型，数量，不去比较参数的名称
x是否能赋值给y，因为x的每个参数必须能在y里找到对应类型的参数，所以满足
但是y有两个参数x只有一个 ，所以y不能赋值给x

函数参数双向协变？

可选参数及剩余参数
函数兼容性的时候 -》可选参数，不用计算在内
一个函数有剩余参数时，它被当做无限个可选参数

函数重载
对于有重载的函数，源函数的每个重载都要在目标函数上找到
对应的函数签名。 这确保了目标函数可以在所有源函数可调用的地方调用


枚举
1.枚举类型与数字类型兼容
2.数字类型与枚举类型兼容
3.不同枚举类型之间是不兼容的
enum Person {
  name,
  age,
  love
}
let age = Person.age;
let num = 18;

age = num;
num = age;

类
类有静态部分和实例部分的类型
两个类的兼容性比较，只比较静态部分，不比较实例部分
类的私有成员，已在兼容性判断内，要么有一样的，要么继承

泛型
对于泛型而言。类型参数只影响使用其做为类型时的结果类型
对于没指定泛型类型的泛型参数时，会把所有泛型参数当成any比较。 然后用结果类型进行比较
interface Empty<T> {
}
let x: Empty<number>;
let y: Empty<string>;
x = y;  // okay, y matches structure of x

















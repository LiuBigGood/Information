枚举 enum
使用枚举可以定义一些有名字的数字常量
enum Direction {
    Up = 1,
    Down,
    Left,
    Right
}

常数枚举表达式
1.数字字面量
2.引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）
 如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用
3.带括号的常数枚举表达式
4.+, -, ~ 一元运算符应用于常数枚举表达式
5.+, -, *, /, %, <<, >>, >>>, &, |, ^ 二元运算符，常数枚举表达式做为其一个操作对象。 
若常数枚举表达式求值后为NaN或Infinity，则会在编译阶段报错。

枚举是在运行时真正存在的一个对象
 枚举值和枚举名可以相互反射
enum Enum {
    A
}
let a = Enum.A;
let nameOfA = Enum[a]; // "A"

常量枚举 
为了避免生成多余的代码和间接引用，可以使用常量枚举 
const关键字
const enum Enum {
    A = 1,
    B = A * 2
}

外部枚举
外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，
没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，
没有初始化方法时被当做需要经过计算的。
declare enum Enum {
    A = 1,
    B,
    C = 2
}

























